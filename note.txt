## set zone london,uk
gcloud config set compute/zone europe-west6-c
## put project id value
export PROJECT_ID="$(gcloud config get-value project -q)" 
## get cassandra
docker pull cassandra:latest
## run cassandra
docker run -p 9042:9042 --name cassandra -d cassandra:latest
## if google container api not enabled
gcloud services enable container.googleapis.com
## run cassandra in cqlsh
docker exec -it cassandra cqlsh

## kubernets and cassandra
## setup cassandra cluster
gcloud container clusters create cassandra --num-nodes=3 --machine-type "n1-standard-2"
## retrieve cluster credentials and configure kubectl command-line tool
gcloud container clusters get-credentials loadbalancedcluster
## specify and download cassandra service
wget -O cassandra-peer-service.yml http://tinyurl.com/yyxnephy
wget -O cassandra-service.yml http://tinyurl.com/y65czz8e
wget -O cassandra-replication-controller.yml http://tinyurl.com/y2crfsl8
## run the cassandra in kubernetes
kubectl create -f cassandra-peer-service.yml
kubectl create -f cassandra-service.yml
kubectl create -f cassandra-replication-controller.yml
## check single container
kubectl get pods -l name=cassandra 
## scale nodes
kubectl scale rc cassandra --replicas=3
## check ring formed
kubectl exec -it cassandra-cx4gc -- nodetool status
## run cassandra cqlsh
docker exec -it cassandra cqlsh
CREATE KEYSPACE weathertable WITH REPLICATION = {'class' : 'SimpleStrategy', 'replication_factor' : 2};
## get current ip
/sbin/ip route|awk '/default/ { print $3 }'


## build docker
docker build -t gcr.io/${PROJECT_ID}/weather-app:v1 .
## push docker
gcloud auth configure-docker
docker push gcr.io/${PROJECT_ID}/weather-app:v1
## test run locally
docker run --rm -p 8080:8080 gcr.io/${PROJECT_ID}/weather-app:v1 


## run kubernetes service
kubectl run weather-app --image=gcr.io/${PROJECT_ID}/weather-app:v1 --port 8080
## expose for internally
kubectl expose deployment weather-app --target-port=8080 --type=NodePort
## check kubernetes
kubectl get services
## deploy ingress
kubectl apply -f basic-ingress.yaml
## check external ip
kubectl get ingress basic-ingress

----------cleaning------------
## kubernetes delete
kubectl delete --all replicationcontroller
kubectl delete --all services 
kubectl delete service servicename
## delete container clusters
gcloud container clusters delete cassandra
## delete ingress
kubectl delete ingress basic-ingress
## delete static ip
gcloud compute addresses delete web-static-ip --global
## delete untagged docker images
docker rmi -f $(docker images | grep "<none>" | awk "{print \$3}")

--------!!!!WARNING!!! DELETE ALL CONTAINERS AND IMAGES-------
# Delete all containers
docker rm -f $(docker ps -a -q)
# Delete all images
docker rmi -f $(docker images -q)
# delete all gcloud ontainer with all of the tags
./cleanup.sh gcr.io/${PROJECT_ID}/weather-app @UP-TO-DATE@


---batch insert
insert_default = "INSERT INTO {}.{} (CityName) VALUES (%s) IF NOT EXISTS".format(
            KEYSPACE, TABLENAME)
        # put statements as array
        statements_and_params = []
        for each in CITYLIST:
            params = (each)
            print(params)
            statements_and_params.append((insert_default, params))
            session.execute(insert_default, (params))
        # run all statements
        results = execute_concurrent(
            session, statements_and_params, raise_on_first_error=False)
        for x in results:
            print(x)